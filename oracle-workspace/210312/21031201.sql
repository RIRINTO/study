2021-03-12-01)

--PL/SQL의 종류 : 빨리가려면 뻐스타고 가자
/*
Package
	패키지
User function
	사용자 정의 함수
Stored procedure
	저장 프로시저
Trigger
	트리거
Anonymous block
	익명의 블록
*/

** FOR 문과 CURSOR
	사용 예)
		사원 테이블 ( EMPLOYEES ) 에서 부서번호 ( DEPARTMENT_ID ) 90번에 속한 직원정보를 출력하시오.
		Alias는 사원번호, 사원명, 입사일
			SELECT EMPLOYEE_ID AS 사원번호,
					EMP_NAME AS 사원명,
					HIRE_DATE AS 입사일
				FROM EMPLOYEES
				WHERE DEPARTMENT_ID = 90;
/
SET SERVEROUTPUT ON;
/
			DECLARE
				V_ID EMPLOYEES.EMPLOYEE_ID % TYPE;
				V_NAME EMPLOYEES.EMP_NAME % TYPE;
				V_DATE EMPLOYEES.HIRE_DATE % TYPE;
				CURSOR CUR
				IS
					SELECT EMPLOYEE_ID,
							EMP_NAME,
							HIRE_DATE
						FROM EMPLOYEES
						WHERE DEPARTMENT_ID = 90;
			BEGIN
				OPEN CUR;
				FETCH CUR
					INTO V_ID, V_NAME, V_DATE;
				DBMS_OUTPUT.PUT_LINE(V_ID || '		' || V_NAME || '	' || V_DATE);
				CLOSE CUR;
			END;
/
			DECLARE
				V_ID EMPLOYEES.EMPLOYEE_ID % TYPE;
				V_NAME EMPLOYEES.EMP_NAME % TYPE;
				V_DATE EMPLOYEES.HIRE_DATE % TYPE;
				CURSOR CUR
				IS
					SELECT EMPLOYEE_ID,
							EMP_NAME,
							HIRE_DATE
						FROM EMPLOYEES
						WHERE DEPARTMENT_ID = 90;
			BEGIN
				OPEN CUR;
				LOOP
					FETCH CUR
						INTO V_ID, V_NAME, V_DATE;
					EXIT WHEN CUR % NOTFOUND;
					DBMS_OUTPUT.PUT_LINE(V_ID || '		' || V_NAME || '	' || V_DATE);
				END LOOP;
				CLOSE CUR;
			END;
/
			DECLARE
				CURSOR CUR_EMP01
				IS
					SELECT EMPLOYEE_ID,
							EMP_NAME,
							HIRE_DATE
						FROM EMPLOYEES
						WHERE DEPARTMENT_ID = 90;
			BEGIN
				FOR REC_EMP01 IN CUR_EMP01 LOOP
					DBMS_OUTPUT.PUT_LINE('사원번호	' || REC_EMP01.EMPLOYEE_ID);
					DBMS_OUTPUT.PUT_LINE('사원명	' || REC_EMP01.EMP_NAME);
					DBMS_OUTPUT.PUT_LINE('입사일	' || REC_EMP01.HIRE_DATE);
					DBMS_OUTPUT.PUT_LINE('--------------------');
				END LOOP;
			END;
/

2021-03-12-02)
	회원의 마일리지 현황을 출력하기
	단, 직업이 주부인 회원만 출력
	Alias는 MEM_NAME, MEM_MILEAGE
	MEM_NAME 오름차순으로 정렬
/*
%ISOPEN
	커서가 열린 상태이면 TRUE
% NOTFOUND
	SQL 실행 후 데이터가 없을 때 TRUE
% FOUND
	SQL 실행 후 데이터가 있을 때 TRUE
% ROWCOUNT
	행의 수
*/
/
        SELECT MEM_NAME,
                MEM_MILEAGE
            FROM MEMBER
            WHERE MEM_JOB = '주부'
            ORDER BY MEM_NAME;
/
		DECLARE
			V_NAME MEMBER.MEM_NAME % TYPE;
			V_MILEAGE MEMBER.MEM_MILEAGE % TYPE;
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '주부'
					ORDER BY MEM_NAME;
		BEGIN
			OPEN CUR_MEM01;
			LOOP
				FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
				EXIT WHEN CUR_MEM01 % NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(V_NAME || '		' || V_MILEAGE);
			END LOOP;
			CLOSE CUR_MEM01;
		END;
/
		DECLARE
			V_NAME MEMBER.MEM_NAME % TYPE;
			V_MILEAGE MEMBER.MEM_MILEAGE % TYPE;
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '주부'
					ORDER BY MEM_NAME;
		BEGIN
			OPEN CUR_MEM01;
			FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
			WHILE CUR_MEM01 % FOUND LOOP
				DBMS_OUTPUT.PUT_LINE(V_NAME || '		' || V_MILEAGE);
				FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
			END LOOP;
			CLOSE CUR_MEM01;
		END;
/
		DECLARE
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '주부'
					ORDER BY MEM_NAME;
		BEGIN
			FOR REC_MEM01 IN CUR_MEM01 LOOP
				DBMS_OUTPUT.PUT_LINE(CUR_MEM01 % ROWCOUNT || '. ' || REC_MEM01.MEM_NAME || '		' || REC_MEM01.MEM_MILEAGE);
			END LOOP;
		END;
/
		DECLARE
		BEGIN
			FOR REC_MEM01 IN (
					SELECT MEM_NAME,
							MEM_MILEAGE
						FROM MEMBER
						WHERE MEM_JOB = '주부'
						ORDER BY MEM_NAME
				) LOOP
				DBMS_OUTPUT.PUT_LINE(REC_MEM01.MEM_NAME || '		' || REC_MEM01.MEM_MILEAGE);
			END LOOP;
		END;
/
	직업을 입력받아서 FOR LOOP를 이용하는 CURSOR
/
		ACCEPT P_JOB PROMPT '직업을 입력하세요'
		DECLARE
			V_NAME MEMBER.MEM_NAME % TYPE;
			V_MILEAGE MEMBER.MEM_MILEAGE % TYPE;
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '&P_JOB'
					ORDER BY MEM_NAME;
		BEGIN
			OPEN CUR_MEM01;
			LOOP
				FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
				EXIT WHEN CUR_MEM01 % NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(V_NAME || '		' || V_MILEAGE);
			END LOOP;
			CLOSE CUR_MEM01;
		END;
/
		ACCEPT P_JOB PROMPT '직업을 입력하세요'
		DECLARE
			V_NAME MEMBER.MEM_NAME % TYPE;
			V_MILEAGE MEMBER.MEM_MILEAGE % TYPE;
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '&P_JOB'
					ORDER BY MEM_NAME;
		BEGIN
			OPEN CUR_MEM01;
			FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
			WHILE CUR_MEM01 % FOUND LOOP
				DBMS_OUTPUT.PUT_LINE(V_NAME || '		' || V_MILEAGE);
				FETCH CUR_MEM01
					INTO V_NAME, V_MILEAGE;
			END LOOP;
			CLOSE CUR_MEM01;
		END;
/
		ACCEPT P_JOB PROMPT '직업을 입력하세요'
		DECLARE
			CURSOR CUR_MEM01
			IS
				SELECT MEM_NAME,
						MEM_MILEAGE
					FROM MEMBER
					WHERE MEM_JOB = '&P_JOB'
					ORDER BY MEM_NAME;
		BEGIN
			FOR REC_MEM01 IN CUR_MEM01 LOOP
				DBMS_OUTPUT.PUT_LINE(CUR_MEM01 % ROWCOUNT || '. ' || REC_MEM01.MEM_NAME || '		' || REC_MEM01.MEM_MILEAGE);
			END LOOP;
		END;
/
		ACCEPT P_JOB PROMPT '직업을 입력하세요'
		BEGIN
			FOR REC_MEM01 IN (
					SELECT MEM_NAME,
							MEM_MILEAGE
						FROM MEMBER
						WHERE MEM_JOB = '&P_JOB'
						ORDER BY MEM_NAME
				) LOOP
				DBMS_OUTPUT.PUT_LINE(REC_MEM01.MEM_NAME || '		' || REC_MEM01.MEM_MILEAGE);
			END LOOP;
		END;
/
		CREATE OR REPLACE PROCEDURE USP_PROD_TOTALSTOCK_UPDATE(
				V_PROD IN PROD.PROD_ID % TYPE,
				V_QTY IN PROD.PROD_TOTALSTOCK % TYPE
			)
		IS
		BEGIN
			UPDATE PROD
				SET PROD_TOTALSTOCK = PROD_TOTALSTOCK + V_QTY
				WHERE PROD_ID = V_PROD;
			DBMS_OUTPUT.PUT_LINE('업데이트 성공');
		END;
/
		EXECUTE USP_PROD_TOTALSTOCK_UPDATE('P101000001', 10);
/
		SELECT PROD_ID,
				PROD_TOTALSTOCK
			FROM PROD
			WHERE PROD_ID='P101000001';
/
		ROLLBACK;
/
	회원아이디 ( MEM_ID ) 및 점수를 입력받아
	마일리지 점수 ( MEM_MILEAGE ) 를 업데이트하는 프로시저 ( USP_MEMBER_UPDATE ) 를 생성하기.
	EXECUTE를 통해 김은대 ( a001 ) 회원의 마일리지 값을 100씩 추가하여
	5회에 걸쳐 500으로 올리기
/
	CREATE OR REPLACE PROCEDURE USP_MEMBER_UPDATE(
		V_ID IN MEMBER.MEM_ID % TYPE,
		V_MILEAGE IN MEMBER.MEM_MILEAGE % TYPE
	)
	IS
	BEGIN
		UPDATE MEMBER
			SET MEM_MILEAGE = MEM_MILEAGE + V_MILEAGE
			WHERE MEM_ID = V_ID;
		DBMS_OUTPUT.PUT_LINE('업데이트 완료');
	END;
/
	EXECUTE USP_MEMBER_UPDATE('a001', 100);
/
	SELECT MEM_ID,
			MEM_MILEAGE
		FROM MEMBER
		WHERE MEM_ID = 'a001';
/
    ROLLBACK;
/