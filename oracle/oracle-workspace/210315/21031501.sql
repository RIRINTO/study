2021-03-15-01)

SCALAR 서브쿼리1 ( SELECT 절에 쓰인 서브쿼리 )
	입고일자 ( BUY_DATE ), 

CREATE TABLE PROCTEST(
	PROC_SEQ NUMBER,
	PROC_CONTENT VARCHAR2(30),

	CONSTRAINT PK_PROCTEST PRIMARY KEY(PROC_SEQ)
);

CREATE SEQUENCE SEQPROC1
	START WITH 1
	INCREMENT BY 1;

프로시저 PROC_TEST1을 생성
실행하면 PROCTEST 테이블에
1, '개똥이' 데이터가 추가되도록 처리
/
CREATE OR REPLACE PROCEDURE PROC_TEST1
IS
BEGIN
	INSERT INTO PROCTEST(PROC_SEQ, PROC_CONTENT)
		VALUES(SEQPROC1.NEXTVAL, '개똥이');
		
EXCEPTION
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('예외 발생 : ' || SQLERRM);
END;
/
--프로시저 실행 ( EXECUTE / EXEC )
EXECUTE PROC_TEST1;
/
SELECT * FROM PROCTEST;
/
-- 시스템 뷰 테이블에서 프로시저 목록 검색
SELECT * FROM USER_PROCEDURES;

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = NVL(NULL, DEPARTMENT_ID);


/
--1-2) 프로시저 PROC_TEST2을 생성,
--실행하면 PROCTEST 테이블의 마지막 데이터를 삭제
--삭제할 데이터가 없을 경우,
--"삭제할 데이터가 없습니다"라는 에러처리

CREATE OR REPLACE PROCEDURE PROC_TEST2
IS
	USER_DEFINE_ERROR EXCEPTION;
	V_SEQ NUMBER := 0;
BEGIN
	SELECT MAX(PROC_SEQ)
		INTO V_SEQ
		FROM PROCTEST;
	IF V_SEQ IS NULL
		THEN RAISE USER_DEFINE_ERROR;
	ELSE
		DELETE
			FROM PROCTEST
			WHERE PROC_SEQ = V_SEQ;
	END IF;
EXCEPTION
	WHEN OTHERS
		THEN DBMS_OUTPUT.PUT_LINE('삭제할 데이터가 없습니다.');
END;
/
EXECUTE PROC_TEST2;
/
SET SERVEROUTPUT ON;
/
--1-3) 회원 ID를 매개변수 ( parameter )로 하여\
--해당 회원의 마일리지를 100점 추가하는
--PROCEDURE를 생성하기 ( PROC_TEST3 )

SELECT MEM_ID,
		MEM_MILEAGE
	FROM MEMBER
	WHERE MEM_ID = 'a001';
/
CREATE OR REPLACE PROCEDURE PROC_TEST3(P_ID IN VARCHAR2)
IS
	UPD_ERROR EXCEPTION;
BEGIN
	UPDATE MEMBER
		SET MEM_MILEAGE = MEM_MILEAGE + 100
		WHERE MEM_ID = P_ID;
	IF SQL % ROWCOUNT < 1
		THEN RAISE UPD_ERROR;
	ELSE DBMS_OUTPUT.PUT_LINE('업데이트가 완료되었습니다.');
	END IF;
EXCEPTION
	WHEN UPD_ERROR
		THEN DBMS_OUTPUT.PUT_LINE('해당 회원이 없습니다.');
END;
/
EXECUTE PROC_TEST3('a001');
/
--회원아이디를 입력받아 이름과 취미를 OUT 매개변수로 처리
CREATE OR REPLACE PROCEDURE USP_MEMBERID(
		P_MEM_ID IN MEMBER.MEM_ID % TYPE,
		P_MEM_NAME OUT MEMBER.MEM_NAME % TYPE,
		P_MEM_LIKE OUT MEMBER.MEM_LIKE % TYPE
	)
IS
BEGIN
	SELECT MEM_NAME,
			MEM_LIKE
		INTO P_MEM_NAME,
			P_MEM_LIKE
		FROM MEMBER
		WHERE MEM_ID = P_MEM_ID;
END;
/
-실행
VAR MEM_NAME VARCHAR2(20)
VAR MEM_LIKE VARCHAR2(20)
EXECUTE USP_MEMBERID('a001', :MEM_NAME, :MEM_LIKE);
PRINT MEM_NAME
PRINT MEM_LIKE;
/
--상품 코드와 월을 입력하면 해당 월에 대한 해당 상품의 입고, 출고를 처리해 화면에 출력하시오.
--( 프로시저 명 : USP_PROD_INFO,
--	월 입력형식은 'YYYYMM'이라 가정,
--	입고 및 출고는 OUT 매개변수로 처리. )
--컬럼 구성 : PROD_ID, EXTRACT(MONTH FROM BUY_DATE), SUM(BUY_QTY), SUM(CART_QTY)
--ALIAS : 상품코드, 월, 입고수량합계 ( BUYPROD ), 출고수량합계 ( CART )
CREATE OR REPLACE PROCEDURE USP_PROD_INFO(
		P_DATE IN VARCHAR2,
		P_CODE OUT VARCHAR2,
		P_MONTH OUT NUMBER,
		P_INSUM OUT NUMBER,
		P_OUTSUM OUT NUMBER
	)
IS
BEGIN
	SELECT A.BUY_PROD,
			EXTRACT(MONTH FROM TO_DATE(P_DATE,'YYYYMM')),
			SUM(BUY_QTY),
			SUM(CART_QTY)
		INTO P_CODE,
			P_MONTH,
			P_INSUM,
			P_OUTSUM
		FROM BUYPROD A
			FULL OUTER JOIN CART B ON(
					A.BUY_PROD = B.CART_PROD
						AND TO_CHAR(A.BUY_DATE, 'YYYYMM') = P_DATE
						AND B.CART_NO LIKE P_DATE || '%'
				)
		WHERE ROWNUM = 1
		GROUP BY A.BUY_PROD,
			TO_CHAR(TO_DATE(P_DATE,'YYYYMM'),'MM');
END;

VAR P_CODE VARCHAR2(10)
VAR P_MONTH NUMBER
VAR P_INSUM NUMBER
VAR P_OUTSUM NUMBER
EXECUTE USP_PROD_INFO('200504', :P_CODE, :P_MONTH, :P_INSUM, :P_OUTSUM);
PRINT P_CODE
PRINT P_MONTH
PRINT P_INSUM
PRINT P_OUTSUM;
