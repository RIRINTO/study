2021-03-18-01)
/
--함수 문제
--다음과 같이 출력하시오
--상품코드, 상품명, 대분류코드, 대분류명
--함수를 사용. 함수명은 FN_PRODNM
CREATE OR REPLACE FUNCTION FN_PRODNM(P_LPROD_GU IN LPROD.LPROD_GU % TYPE)
	RETURN VARCHAR2
IS
	R_LPROD_NM LPROD.LPROD_NM % TYPE;
BEGIN
	SELECT LPROD_NM
		INTO R_LPROD_NM
		FROM LPROD
		WHERE LPROD_GU = P_LPROD_GU;
	RETURN R_LPROD_NM;
EXCEPTION
	WHEN OTHERS
		THEN
			RETURN NULL;
END;
/
SELECT PROD_ID,
		PROD_NAME,
		PROD_LGU,
		FN_PRODNM(PROD_LGU)
	FROM PROD
	ORDER BY PROD_ID;
/
--함수문제2
--다음과 같이 출력하시오.
--장바구니코드, 상품코드, 판매개수, 회원아이디, 회원명
--함수를 사용, 함수명은 FN_GET_MEM_NM
CREATE OR REPLACE FUNCTION FN_GET_MEM_NM(P_CART_MEMBER VARCHAR2)
	RETURN VARCHAR2
IS
	R_MEM_NAME MEMBER.MEM_NAME % TYPE;
BEGIN
	SELECT MEM_NAME
		INTO R_MEM_NAME
		FROM MEMBER
		WHERE MEM_ID = P_CART_MEMBER;
	RETURN R_MEM_NAME;
EXCEPTION
	WHEN OTHERS
		THEN
			RETURN NULL;
END;
/
SELECT CART_NO,
		CART_PROD,
		CART_QTY,
		CART_MEMBER,
		FN_GET_MEM_NM(CART_MEMBER)
	FROM CART
    ORDER BY CART_NO,
        CART_PROD;
/
--함수 문제 3
--다음과 같이 출력하시오.
--주소1을 받아서 거주지역을 리턴
--회원아이디 회원명 거주지역
--함수를 사용. 함수명은 FN_GET_CITY
CREATE OR REPLACE FUNCTION FN_GET_CITY(P_MEM_ID MEMBER.MEM_ID % TYPE)
	RETURN VARCHAR2
IS
	R_MEM_ADD MEMBER.MEM_REGNO1 % TYPE;
BEGIN
	SELECT SUBSTR(MEM_ADD1, 1, 2)
		INTO R_MEM_ADD
		FROM MEMBER
		WHERE MEM_ID = P_MEM_ID;
	RETURN R_MEM_ADD;
EXCEPTION
	WHEN OTHERS
		THEN
			RETURN NULL;
END;
/
SELECT MEM_ID AS 회원아이디,
		MEM_NAME AS 회원명,
		FN_GET_CITY(MEM_ID) AS 거주지역
	FROM MEMBER
	ORDER BY MEM_ID;
/
--함수문제4
--2005년도 상품분류 별
--상품분류 별 총 판매금액 ( SUM ( PROD_SALE * CART_QTY ) ) 을 출력
CREATE OR REPLACE FUNCTION ALL_SALE_AMT(
		P_LPROD_GU VARCHAR2,
		P_YEAR NUMBER
	)
	RETURN NUMBER
IS
	R_SALE_AMT NUMBER;
BEGIN
	SELECT NVL(SUM(A.CART_QTY * B.PROD_SALE), 0)
		INTO R_SALE_AMT
		FROM CART A, PROD B
		WHERE A.CART_PROD = B.PROD_ID
			AND A.CART_NO LIKE P_YEAR || '%'
			AND B.PROD_LGU = P_LPROD_GU;
	RETURN R_SALE_AMT;
EXCEPTION
	WHEN OTHERS
		THEN
			RETURN 0;
END;
/
SELECT LPROD_GU AS 상품분류코드,
		LPROD_NM AS 상품분류명,
		ALL_SALE_AMT(LPROD_GU, 2005) AS 총판매금액
	FROM LPROD;
/
SET SERVEROUTPUT ON;
/
--P.23
--트리거 연습
CREATE OR REPLACE TRIGGER TG_LPROD_IN
	AFTER INSERT
	ON LPROD
BEGIN
	DBMS_OUTPUT.PUT_LINE('상품분류가 추가되었습니다.');
END;
/
INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
	VALUES(22, 'P212', '테스트2');
INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
	VALUES(23, 'P213', '테스트3');
INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
	VALUES(24, 'P214', '테스트4');
/
ROLLBACK;
/
CREATE TABLE EMP01(
	EMPNO NUMBER(4) PRIMARY KEY,
	EMPNAME VARCHAR2(45),
	EMPJOB VARCHAR2(60)
);
CREATE TABLE SAL01(
	SALNO NUMBER(4) PRIMARY KEY,
	SAL NUMBER(7, 2),
	EMPNO NUMBER(4) REFERENCES EMP01(EMPNO)
);
CREATE SEQUENCE SAL01_SALNO_SEQ
	INCREMENT BY 1
	START WITH 1;

CREATE OR REPLACE TRIGGER TRG_02
	AFTER INSERT ON EMP01
FOR EACH ROW
BEGIN
	INSERT INTO SAL01 VALUES (SAL01_SALNO_SEQ.NEXTVAL, 100, :NEW.EMPNO);
END;
/
INSERT INTO EMP01 VALUES(1, '개똥이', '프로그래머');
INSERT INTO EMP01 VALUES(2, '박명수', '프로그래머');
/
SELECT * FROM EMP01;
SELECT * FROM SAL01;
/